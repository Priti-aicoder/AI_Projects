{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMHqZsVv9QIuFXKrgthv/aY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":403},"id":"eLpWlsOwqZbT","executionInfo":{"status":"error","timestamp":1749489105404,"user_tz":-330,"elapsed":192,"user":{"displayName":"Priti Dubey","userId":"12892686322164988565"}},"outputId":"5d13d459-948c-4e3b-e24c-367c154c22ff"},"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"No module named 'streamlit'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-8fd42d5b1a9e>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mstreamlit\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mst\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mjoblib\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Load the saved model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'streamlit'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}],"source":["import streamlit as st\n","import pandas as pd\n","import joblib\n","\n","# Load the saved model\n","model = joblib.load('churn_model.pkl')\n","\n","st.title(\"Customer Churn Prediction\")\n","\n","# User inputs for key features (you can add more)\n","tenure = st.number_input('Tenure (months)', min_value=0, max_value=100, value=1)\n","monthly_charges = st.number_input('Monthly Charges', min_value=0.0, max_value=200.0, value=50.0)\n","total_charges = st.number_input('Total Charges', min_value=0.0, max_value=10000.0, value=100.0)\n","\n","# For categorical inputs, use selectbox or radio\n","gender = st.selectbox('Gender', ['Male', 'Female'])\n","senior_citizen = st.selectbox('Senior Citizen', ['No', 'Yes'])\n","partner = st.selectbox('Partner', ['No', 'Yes'])\n","dependents = st.selectbox('Dependents', ['No', 'Yes'])\n","# Add more inputs as needed (like Contract, PaymentMethod...)\n","\n","# Prepare input data as dataframe (must match training features after encoding)\n","def preprocess_input():\n","    data = {\n","        'tenure': tenure,\n","        'MonthlyCharges': monthly_charges,\n","        'TotalCharges': total_charges,\n","        'gender_Male': 1 if gender == 'Male' else 0,\n","        'SeniorCitizen': 1 if senior_citizen == 'Yes' else 0,\n","        'Partner_Yes': 1 if partner == 'Yes' else 0,\n","        'Dependents_Yes': 1 if dependents == 'Yes' else 0,\n","        # Add more features and encoding here matching your model!\n","    }\n","    return pd.DataFrame([data])\n","\n","input_df = preprocess_input()\n","\n","if st.button('Predict Churn'):\n","    prediction = model.predict(input_df)[0]\n","    proba = model.predict_proba(input_df)[0][1]\n","    if prediction == 1:\n","        st.error(f\"⚠️ Customer likely to churn! (Probability: {proba:.2f})\")\n","    else:\n","        st.success(f\"✅ Customer unlikely to churn (Probability: {proba:.2f})\")\n"]},{"cell_type":"code","source":[],"metadata":{"id":"E0M3BeUsrRTJ"},"execution_count":None,"outputs":[]}]}